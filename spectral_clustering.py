# -*- coding: utf-8 -*-
"""spectral-clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AkiwSQqlQB3G4KTBKLCfctTE3w3uoJvJ
"""

# Commented out IPython magic to ensure Python compatibility.
# import require libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import SpectralClustering
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from plotnine import *
# %matplotlib inline

# import data
star_data = pd.read_csv("../input/codemlc1/train.csv")

# Plot X,Y
plt.scatter(star_data['x'],star_data['y'])

# Scaling Data, only x,y,z matters
star_data = star_data.iloc[:, [1,2,3]].values
scaler = StandardScaler()
scaler.fit(star_data)
scaled_sd = scaler.transform(star_data)

"""# PCA algorithm
##### Principle component analysis can be used to identify patterns in multi-variable samples 
##### through principal components. It is commonly used for dimensionality reduction. It can also
##### provide insight into weights of variables affecting variation of data.
###### https://www.youtube.com/watch?v=FgakZw6K1QQ

"""

pca = PCA(n_components=2)
pca.fit(scaled_sd)
scaled_sd.shape

# Reduce Variables Down to Two with PCA
x_pca = pca.transform(scaled_sd) 
x_pca.shape

# Put into data frame
df = pd.DataFrame(data=x_pca ,columns = ["primary component", "secondary component"])

"""# Spectral clustering
##### A clustering algorithm
###### https://towardsdatascience.com/spectral-clustering-for-beginners-d08b7d25b4d8
###### https://scikit-learn.org/stable/modules/clustering.html
"""

model = SpectralClustering(n_clusters=2, affinity='nearest_neighbors',assign_labels='kmeans')
labelsS = model.fit_predict(x_pca)
fig, ax = plt.subplots(figsize=(9,7))
ax.set_title('kernal transform to higher dimension\nlinear separation is possible', fontsize=18, fontweight='demi')
plt.scatter(x_pca[:, 0], x_pca[:, 1], c=labelsS, s=50, cmap='viridis')